#"Task-Use the walmart_stock.csv file to Answer and complete the  tasks below!"

### "Load the Walmart Stock CSV File, have Spark infer the data types."

df=spark.read.format("csv").option("header","true").option("inferSchema","true").load("/FileStore/tables/walmart_stock-2.csv")
df.show()

#output
"""
+----------+------------------+------------------+------------------+------------------+--------+------------------+
|      Date|              Open|              High|               Low|             Close|  Volume|         Adj Close|
+----------+------------------+------------------+------------------+------------------+--------+------------------+
|2012-01-03|         59.970001|         61.060001|         59.869999|         60.330002|12668800|52.619234999999996|
|2012-01-04|60.209998999999996|         60.349998|         59.470001|59.709998999999996| 9593300|         52.078475|
|2012-01-05|         59.349998|         59.619999|         58.369999|         59.419998|12768200|         51.825539|
|2012-01-06|         59.419998|         59.450001|         58.869999|              59.0| 8069400|          51.45922|
|2012-01-09|         59.029999|         59.549999|         58.919998|             59.18| 6679300|51.616215000000004|
|2012-01-10|             59.43|59.709998999999996|             58.98|59.040001000000004| 6907300|         51.494109|
|2012-01-11|         59.060001|         59.529999|59.040001000000004|         59.400002| 6365600|         51.808098|
|2012-01-12|59.790001000000004|              60.0|         59.400002|              59.5| 7236400|51.895315999999994|
|2012-01-13|             59.18|59.610001000000004|59.009997999999996|59.540001000000004| 7729300|51.930203999999996|
|2012-01-17|         59.869999|60.110001000000004|             59.52|         59.849998| 8500000|         52.200581|
|2012-01-18|59.790001000000004|         60.029999|         59.650002|60.009997999999996| 5911400|         52.340131|
|2012-01-19|             59.93|             60.73|             59.75|60.610001000000004| 9234600|         52.863447|
|2012-01-20|             60.75|             61.25|         60.669998|61.009997999999996|10378800|53.212320999999996|
|2012-01-23|         60.810001|             60.98|60.509997999999996|             60.91| 7134100|         53.125104|
|2012-01-24|             60.75|              62.0|             60.75|61.389998999999996| 7362800| 53.54375400000001|
|2012-01-25|             61.18|61.610001000000004|61.040001000000004|         61.470001| 5915800| 53.61353100000001|
|2012-01-26|         61.799999|             61.84|             60.77|         60.970001| 7436200|         53.177436|
|2012-01-27|60.860001000000004|         61.119999|60.540001000000004|60.709998999999996| 6287300|         52.950665|
|2012-01-30|         60.470001|             61.32|         60.349998|         61.299999| 7636900|53.465256999999994|
|2012-01-31|         61.529999|             61.57|         60.580002|61.360001000000004| 9761500|53.517590000000006|
+----------+------------------+------------------+------------------+------------------+--------+------------------+
only showing top 20 rows
"""


#"What are the column names?"
df.columns

#output
#Out[4]: ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close']


#What does the Schema look like?"
df.printSchema()

#output
"""
root
 |-- Date: string (nullable = true)
 |-- Open: string (nullable = true)
 |-- High: string (nullable = true)
 |-- Low: string (nullable = true)
 |-- Close: string (nullable = true)
 |-- Volume: string (nullable = true)
 |-- Adj Close: string (nullable = true)
"""

# Print out the first 5 columns."
df.head(5)

#output
"""
Out[7]: [Row(Date='2012-01-03', Open='59.970001', High='61.060001', Low='59.869999', Close='60.330002', Volume='12668800', Adj Close='52.619234999999996'),
 Row(Date='2012-01-04', Open='60.209998999999996', High='60.349998', Low='59.470001', Close='59.709998999999996', Volume='9593300', Adj Close='52.078475'),
 Row(Date='2012-01-05', Open='59.349998', High='59.619999', Low='58.369999', Close='59.419998', Volume='12768200', Adj Close='51.825539'),
 Row(Date='2012-01-06', Open='59.419998', High='59.450001', Low='58.869999', Close='59.0', Volume='8069400', Adj Close='51.45922'),
 Row(Date='2012-01-09', Open='59.029999', High='59.549999', Low='58.919998', Close='59.18', Volume='6679300', Adj Close='51.616215000000004')]
"""

# Use describe() to learn about the DataFrame."
df.describe().show()

#output
"""
+-------+----------+------------------+-----------------+-----------------+-----------------+-----------------+-----------------+
|summary|      Date|              Open|             High|              Low|            Close|           Volume|        Adj Close|
+-------+----------+------------------+-----------------+-----------------+-----------------+-----------------+-----------------+
|  count|      1258|              1258|             1258|             1258|             1258|             1258|             1258|
|   mean|      null| 72.35785375357709|72.83938807631165| 71.9186009594594|72.38844998012726|8222093.481717011|67.23883848728146|
| stddev|      null|  6.76809024470826|6.768186808159218|6.744075756255496|6.756859163732991|  4519780.8431556|6.722609449996857|
|    min|2012-01-03|56.389998999999996|        57.060001|        56.299999|        56.419998|         10010500|        50.363689|
|    max|2016-12-30|         90.800003|        90.970001|            89.25|        90.470001|          9994400|84.91421600000001|
+-------+----------+------------------+-----------------+-----------------+-----------------+-----------------+-----------------+
"""

# There are too many decimal places for mean and stddev in the describe() dataframe. Format the numbers to just show up to two decimal places. Pay careful attention to the datatypes that .describe() returns, we didn't cover how to do this exact formatting, but we covered something very similar.
df.describe().printSchema()

#output
"""
root
 |-- summary: string (nullable = true)
 |-- Date: string (nullable = true)
 |-- Open: string (nullable = true)
 |-- High: string (nullable = true)
 |-- Low: string (nullable = true)
 |-- Close: string (nullable = true)
 |-- Volume: string (nullable = true)
 |-- Adj Close: string (nullable = true)
"""

from pyspark.sql.functions import format_number

result=df.describe()
result.select(result['summary'],
format_number(result['open'].cast('float'),2).alias('open'),
format_number(result['open'].cast('float'),2).alias('High'),
format_number(result['open'].cast('float'),2).alias('Low'),
format_number(result['open'].cast('float'),2).alias('Close'),
result['Volume'].cast('int').alias('Volume')).show()

#output
"""
+-------+--------+--------+--------+--------+--------+
|summary|    open|    High|     Low|   Close|  Volume|
+-------+--------+--------+--------+--------+--------+
|  count|1,258.00|1,258.00|1,258.00|1,258.00|    1258|
|   mean|   72.36|   72.36|   72.36|   72.36| 8222093|
| stddev|    6.77|    6.77|    6.77|    6.77| 4519780|
|    min|   56.39|   56.39|   56.39|   56.39|10010500|
|    max|   90.80|   90.80|   90.80|   90.80| 9994400|
+-------+--------+--------+--------+--------+--------+
"""

## Create a new dataframe with a column called HV Ratio that is the ratio of the High Price versus volume of stock traded for a day."
df2=df.withColumn("HV Ratio",df['High']/df['Volume'])
df2.select('HV Ratio').show()

"""
+--------------------+
|            HV Ratio|
+--------------------+
|4.819714653321546E-6|
|6.290848613094555E-6|
|4.669412994783916E-6|
|7.367338463826307E-6|
|8.915604778943901E-6|
|8.644477436914568E-6|
|9.351828421515645E-6|
| 8.29141562102703E-6|
|7.712212102001476E-6|
|7.071764823529412E-6|
|1.015495466386981E-5|
|6.576354146362592...|
| 5.90145296180676E-6|
|8.547679455011844E-6|
|8.420709512685392E-6|
|1.041448341728929...|
|8.316075414862431E-6|
|9.721183814992126E-6|
|8.029436027707578E-6|
|6.307432259386365E-6|
+--------------------+
only showing top 20 rows
"""

#What day had the Peak High in Price?"
df.orderBy(df['High'].desc()).show()

"""
+----------+-----------------+-----------------+-----------------+-----------------+--------+-----------------+
|      Date|             Open|             High|              Low|            Close|  Volume|        Adj Close|
+----------+-----------------+-----------------+-----------------+-----------------+--------+-----------------+
|2015-01-13|        90.800003|        90.970001|            88.93|        89.309998| 8215400|        83.825448|
|2015-01-08|        89.209999|90.66999799999999|            89.07|        90.470001|12713600|84.91421600000001|
|2015-01-09|            90.32|        90.389999|            89.25|        89.349998| 8522500|        83.862993|
|2015-01-12|        89.360001|        90.309998|        89.220001|        90.019997| 7372500|        84.491846|
|2015-01-23|88.41999799999999|        89.260002|        87.889999|        88.510002| 7565800|83.07458100000001|
|2015-01-26|        88.309998|        89.160004|        88.120003|        88.629997| 4666700|        83.187207|
|2015-01-07|        86.779999|            88.68|86.66999799999999|        88.599998| 8498400|        83.159051|
|2015-01-14|        87.650002|        88.519997|             86.5|        86.610001|11745600|        81.291259|
|2015-01-27|        88.279999|        88.459999|        87.260002|        87.529999| 6020500|         82.15476|
|2015-01-22|        87.230003|        88.400002|        86.860001|        88.300003| 7123800|        82.877478|
|2015-01-28|        88.019997|        88.230003|        86.769997|            86.82| 5936800|        81.488362|
|2014-11-28|            86.18|        88.089996|        85.900002|        87.540001| 7820600|81.70768000000001|
|2015-02-06|        87.260002|             88.0|        86.779999|87.33000200000001| 5617600|        81.967045|
|2015-01-15|             87.0|        87.779999|        86.699997|        87.379997| 9412700|         82.01397|
|2015-01-29|            87.07|        87.720001|        86.269997|        87.720001| 6522800|82.33309399999999|
|2015-01-20|            86.82|        87.699997|        85.550003|        86.690002| 7853100|        81.366348|
|2015-01-16|        87.199997|        87.459999|        86.230003|        86.769997| 8408900|81.44143000000001|
|2014-12-31|87.08000200000001|        87.440002|        85.860001|        85.879997| 4151400|        80.606085|
|2015-02-10|        86.620003|        87.410004|86.41999799999999|        87.290001| 5732100|          81.9295|
|2015-01-30|        86.779999|        87.360001|        84.900002|        84.980003|10280200|         79.76136|
+----------+-----------------+-----------------+-----------------+-----------------+--------+-----------------+
only showing top 20 rows
"""


#What is the mean of the Close column?"
from pyspark.sql.functions import mean
df.select(mean('Close')).show()

"""
+-----------------+
|       avg(Close)|
+-----------------+
|72.38844998012726|
+-----------------+
"""


## What is the max and min of the Volume column?"

from pyspark.sql.functions import max,min
df.select(max('Volume')).show()
df.select(min('Volume')).show()

"""
+-----------+
|max(Volume)|
+-----------+
|    9994400|
+-----------+

+-----------+
|min(Volume)|
+-----------+
|   10010500|
+-----------+
"""

# How many days was the Close lower than 60 dollars?"
from pyspark.sql.functions import count
df.filter('Close>60').count()

#Out[42]: 1142

df.filter(df['Close']<60).count()
#Out[39]: 81


#What percentage of the time was the High greater than 80 dollars ?\n"

(df.filter(df['High']>80).count()/df.count())*100
#Out[44]: 8.426073131955485


#What is the Pearson correlation between High and Volume?\n",

from pyspark.sql.functions import corr
df.select(corr('High','Volume')).show()

"""
+-------------------+
| corr(High, Volume)|
+-------------------+
|-0.3384326061737161|
+-------------------+
"""

#What is the max High per year?"

from pyspark.sql.functions import year
year_df=df.withColumn('Year',year(df['Date']))
max_df=year_df.groupBy('Year').agg(max("High").alias("max_high"))
max_df.select('Year',"max_high").show()

"""
+----+---------+
|Year| max_high|
+----+---------+
|2012|77.599998|
|2013|81.370003|
|2014|88.089996|
|2015|90.970001|
|2016|75.190002|
+----+---------+
"""

#What is the average Close for each Calendar Month?\n",
#### In other words, across all the years, what is the average Close price for Jan,Feb, Mar, etc... Your result will have a value for each of these months. "

from pyspark.sql.functions import month
monthdf=df.withColumn('Month',month('Date'))
month_avg=monthdf.select(['Month','Close']).groupBy('Month').agg(mean("Close").alias("month_avg"))
month_avg.select('Month','month_avg').orderBy('Month').show()

"""
+-----+-----------------+
|Month|        month_avg|
+-----+-----------------+
|    1|71.44801958415842|
|    2|  71.306804443299|
|    3|71.77794377570092|
|    4|72.97361900952382|
|    5|72.30971688679247|
|    6| 72.4953774245283|
|    7|74.43971943925233|
|    8|73.02981855454546|
|    9|72.18411785294116|
|   10|71.57854545454543|
|   11| 72.1110893069307|
|   12|72.84792478301885|
+-----+-----------------+
"""

month_avg.show()

"""
+-----+----------+
|Month|avg(Month)|
+-----+----------+
|   12|      12.0|
|    1|       1.0|
|    6|       6.0|
|    3|       3.0|
|    5|       5.0|
|    9|       9.0|
|    4|       4.0|
|    8|       8.0|
|    7|       7.0|
|   10|      10.0|
|   11|      11.0|
|    2|       2.0|
+-----+----------+
"""